#include <iostream>
#include "sortedtype.cpp"
#include <cstdio> //included in option 1
#include <string> //included in option 3

using namespace std;

class timeStamp{
public:
    int hours, minutes, seconds;
    timeStamp(){

    }
    timeStamp(int h, int m, int s){
        hours = h;
        minutes = m;
        seconds = s;
    }
    bool operator == (const timeStamp &t){
        return (hours==t.hours&&minutes==t.minutes&&seconds==t.seconds);
    }
    bool operator != (const timeStamp &t){
        return (hours!=t.hours||minutes!=t.minutes||seconds!=t.seconds);
    }
    bool operator > (const timeStamp &t){
        int a = t.hours*3600+t.minutes*60+t.seconds;
        int b = hours*3600+minutes*60+seconds;
        return b>a;
    }
    bool operator < (const timeStamp &t){
        int a = t.hours*3600+t.minutes*60+t.seconds;
        int b = hours*3600+minutes*60+seconds;
        return b<a;
    }
};

template <class T> void Print(SortedType<T> u){
    int len = u.LengthIs();
    T v;
    for(int i=0; i<len; i++){
        u.GetNextItem(v);
        cout<<v<<" ";
    }
}
//Included in option 3:
string Formate(int a){
    std::string b = std::to_string(a);
    if (a<10)
        return "0"+b;
    else
        return b;
}
template <class timeStamp> void PrintTime(SortedType<timeStamp> u){
    int len = u.LengthIs();
    timeStamp t(0, 0, 0);
    for(int i=0; i<len; i++){
        u.GetNextItem(t);
        
        //Option 3: (most preferred by bhaiyya)
        string h, m, s;
        h=Formate(t.hours);
        m=Formate(t.minutes);
        s=Formate(t.seconds);

        cout<<h<<":"<<m<<":"<<s;


        /*
        Option 2:
        
        if (t.hours<10)
            cout<<"0"<<t.hours<<":";
        else
            cout<<t.hours<<":";

        if (t.minutes<10)
            cout<<"0"<<t.minutes<<":";
        else
            cout<<t.minutes<<":";

        if (t.seconds<10)
            cout<<"0"<<t.seconds;
        else
            cout<<t.seconds;
        */

        /* 
        Option 1:
        
        printf("%02d:%02d:%02d", t.hours, t.minutes, t.seconds);
        */
        cout<<'\n';
    }
}
template <class T> void Retrive(SortedType<T> u, T v){
    bool a;
    u.RetrieveItem(v, a);
    if (a)
        cout<<"Item is found";
    else
        cout<<"Item is not found";
}

template <class T> void Full(SortedType<T> u){
    bool a = u.IsFull();
    if (a)
        cout<<"List is Full";
    else
        cout<<"List is not Full";
}

int main()
{
    //Task 1
    SortedType<int> obj1;
    obj1.MakeEmpty();

    cout<<obj1.LengthIs()<<'\n';

    obj1.InsertItem(5);
    obj1.InsertItem(7);
    obj1.InsertItem(4);
    obj1.InsertItem(2);
    obj1.InsertItem(1);

    Print(obj1);
    cout<<'\n';

    Retrive(obj1, 6);
    cout<<'\n';

    Retrive(obj1, 5);
    cout<<'\n';

    Full(obj1);
    cout<<'\n';

    obj1.DeleteItem(1);

    Print(obj1);
    cout<<'\n';

    Full(obj1);
    cout<<'\n';


    cout<<'\n';


    //Task 2
    SortedType<timeStamp> t;
    timeStamp t1(15, 34, 23), t2(13, 13, 02), t3(43, 45, 12), t4(25, 36, 17), t5(52, 02, 20);

    t.InsertItem(t1);
    t.InsertItem(t2);
    t.InsertItem(t3);
    t.InsertItem(t4);
    t.InsertItem(t5);

    timeStamp temp(25, 36, 17);

    t.DeleteItem(temp);

    PrintTime(t);
}
